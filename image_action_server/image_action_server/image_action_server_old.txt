#!/usr/bin/env python3
import time
import rclpy
from rclpy.node import Node
from rclpy.action import ActionServer, GoalResponse, CancelResponse
from sensor_msgs.msg import Image
from image_action_msgs.action import CompareImages
from cv_bridge import CvBridge

class CompareImagesActionServer(Node):
    def __init__(self):
        super().__init__('compare_images_action_server')
        self.bridge = CvBridge()
        self._server = ActionServer(
            self,
            CompareImages,
            'compare_images',
            execute_callback=self.execute_callback,
            goal_callback=self.goal_callback,
            cancel_callback=self.cancel_callback,
        )
        self.get_logger().info('Action server ready on "compare_images"')

    def goal_callback(self, goal_request: CompareImages.Goal) -> GoalResponse:
        if not isinstance(goal_request.image1, Image) or not isinstance(goal_request.image2, Image):
            self.get_logger().warn('Rejected goal: invalid image types.')
            return GoalResponse.REJECT
        return GoalResponse.ACCEPT

    def cancel_callback(self, _goal_handle) -> CancelResponse:
        self.get_logger().info('Received request to cancel goal.')
        return CancelResponse.ACCEPT

    def execute_callback(self, goal_handle):
        goal = goal_handle.request
        self.get_logger().info(f'Received goal: description="{goal.description}"')

        try:
            img1_cv = self.bridge.imgmsg_to_cv2(goal.image1, desired_encoding='bgr8')
            img2_cv = self.bridge.imgmsg_to_cv2(goal.image2, desired_encoding='bgr8')
        except Exception as e:
            self.get_logger().error(f'Failed to convert images: {e}')
            goal_handle.abort()
            return CompareImages.Result(result=False)

        # Compare dimensions
        if img1_cv.shape != img2_cv.shape:
            self.get_logger().info('Images have different sizes.')
            goal_handle.succeed()
            return CompareImages.Result(result=False)

        # Compare pixels
        import numpy as np
        if np.array_equal(img1_cv, img2_cv):
            self.get_logger().info('Images are identical.')
            goal_handle.succeed()
            return CompareImages.Result(result=True)
        else:
            self.get_logger().info('Images differ.')
            goal_handle.succeed()
            return CompareImages.Result(result=False)


def main():
    rclpy.init()
    node = CompareImagesActionServer()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
